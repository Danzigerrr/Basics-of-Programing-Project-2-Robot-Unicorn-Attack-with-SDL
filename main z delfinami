#define _USE_MATH_DEFINES
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <Windows.h>
#include <cmath>
#include <cstdlib>
#include <ctime>

extern "C" {
#include"./SDL2-2.0.10/include/SDL.h"
#include"./SDL2-2.0.10/include/SDL_main.h"
}

#define SCREEN_WIDTH 640
#define SCREEN_HEIGHT 480
#define SZEROKOSC_MAPY_BMP 10000
#define SURFACE_HEIGHT 300
#define MAX_JUMP_HEIGHT 200
#define SZEROKOSC_KONIA 90
#define WYSOKOSC_KONIA 90
#define LOSOWANIE_ODLEGLOSCI 200

#define ILOSC_PRZESZKOD 8
#define ODL_POM_PRZESZKODAMI 1000

#define ILOSC_WROZEK 4
#define ODL_POM_WROZKAMI 2100
#define ROZMIAR_WROZKI 30

#define ILOSC_STALAKTYTOW 10
#define ODL_POM_STALAKTYTAMI 900

#define ILOSC_DZIUR 6
#define SZEROKOSC_DZIURY 200
#define ODL_POM_DZIURAMI 1500

#define ILOSC_DOD_PODLOZA 3
#define SZEROKOSC_DOD_PODLOZA 200
#define WYSOKOSC_DODATKOWEGO_PODLOZA 60
#define ODL_POM_DOD_PODLOZAMI 2500

#define ROZMIAR_PRZESZKODY 50

#define ILOSC_DELFINOW 3
#define ILOSC_PUNKTOW_NA_DELFINA 100

#define GRUBOSC_PODLOZA 10
#define GRUBOSC_DOD_PODLOZA 20
#define ROZNICA_POZIOMOW_MIEDZY_DOD_PODLOZAMI 50
#define MAX_NUMBER_OF_FRAMES 20
#define MAX_NUMBER_OF_IMAGES 10
#define MAX_NUMBER_OF_RECTS 10

#define numberOfHorseAnimations 6
#define numberOfDolphinsAnimations 5
#ifndef funkcje


// narysowanie napisu txt na powierzchni screen, zaczynaj¹c od punktu (x, y)
// charset to bitmapa 128x128 zawieraj¹ca znaki
// draw a text txt on surface screen, starting from the point (x, y)
// charset is a 128x128 bitmap containing character images
void DrawString(SDL_Surface* screen, int x, int y, const char* text, SDL_Surface* charset) {
	int px, py, c;
	SDL_Rect s, d;
	s.w = 8;
	s.h = 8;
	d.w = 8;
	d.h = 8;
	while (*text) {
		c = *text & 255;
		px = (c % 16) * 8;
		py = (c / 16) * 8;
		s.x = px;
		s.y = py;
		d.x = x;
		d.y = y;
		SDL_BlitSurface(charset, &s, screen, &d);
		x += 8;
		text++;
	};
};


// narysowanie na ekranie screen powierzchni sprite w punkcie (x, y)
// (x, y) to punkt œrodka obrazka sprite na ekranie
// draw a surface sprite on a surface screen in point (x, y)
// (x, y) is the center of sprite on screen
void DrawSurface(SDL_Surface* screen, SDL_Surface* sprite, int x, int y) {
	SDL_Rect dest;
	dest.x = x - sprite->w / 2;
	dest.y = y - sprite->h / 2;
	dest.w = sprite->w;
	dest.h = sprite->h;
	SDL_BlitSurface(sprite, NULL, screen, &dest);
};


// rysowanie pojedynczego pixela
void DrawPixel(SDL_Surface* surface, int x, int y, Uint32 color) {
	int bpp = surface->format->BytesPerPixel;
	Uint8* p = (Uint8*)surface->pixels + y * surface->pitch + x * bpp;
	*(Uint32*)p = color;
};


// rysowanie linii o d³ugoœci l w pionie (gdy dx = 0, dy = 1) 
// b¹dŸ poziomie (gdy dx = 1, dy = 0)
// draw a vertical (when dx = 0, dy = 1) or horizontal (when dx = 1, dy = 0) line
void DrawLine(SDL_Surface* screen, int x, int y, int l, int dx, int dy, Uint32 color) {
	for (int i = 0; i < l; i++) {
		DrawPixel(screen, x, y, color);
		x += dx;
		y += dy;
	};
};


// rysowanie prostok¹ta o d³ugoœci boków l i k
// draw a rectangle of size l by k
void DrawRectangle(SDL_Surface* screen, int x, int y, int l, int k, Uint32 outlineColor, Uint32 fillColor) {
	DrawLine(screen, x, y, k, 0, 1, outlineColor);
	DrawLine(screen, x + l - 1, y, k, 0, 1, outlineColor);
	DrawLine(screen, x, y, l, 1, 0, outlineColor);
	DrawLine(screen, x, y + k - 1, l, 1, 0, outlineColor);
	for (int i = y + 1; i < y + k - 1; i++)
		DrawLine(screen, x + 1, i, l - 2, 1, 0, fillColor);
};


void zwolnienie_powierzchni(SDL_Surface* screen, SDL_Texture* scrtex, SDL_Window* window, SDL_Renderer* renderer){
	SDL_FreeSurface(screen);
	SDL_DestroyTexture(scrtex);
	SDL_DestroyWindow(window);
	SDL_DestroyRenderer(renderer);
	SDL_Quit();
}

void update_the_screen(SDL_Surface* screen, SDL_Texture* scrtex, SDL_Renderer* renderer){
	SDL_UpdateTexture(scrtex, NULL, screen->pixels, screen->pitch);
	//		SDL_RenderClear(renderer);
	SDL_RenderCopy(renderer, scrtex, NULL, NULL);
	SDL_RenderPresent(renderer);
}

void zmierz_czas(int *t1,  double *delta, double *worldTime ){
	int t2 = SDL_GetTicks();
	*delta = (t2 - *t1) * 0.001;
	*t1 = t2;
	*worldTime += *delta;
}

void DrawHorse(SDL_Surface* screen, SDL_Surface* sprite, int x, int y) {
	SDL_Rect dest;
	dest.x = x - sprite->w / 2;
	dest.y = y - sprite->h / 2;
	dest.w = sprite->w;
	dest.h = sprite->h;
	SDL_BlitSurface(sprite, NULL, screen, &dest);
};

#endif 
void setrects(SDL_Rect* clip, int ilosc_klatek){
	for (int i = 0; i < ilosc_klatek; i++) {
		clip[i].x = 0 + i * SZEROKOSC_KONIA;
		clip[i].y = 0;
		clip[i].w = SZEROKOSC_KONIA;
		clip[i].h = WYSOKOSC_KONIA;
	}
}





class singleSprite {
private:

	SDL_Surface* screen;
	SDL_Texture* scrtex;
	SDL_Window* window;
	SDL_Renderer* renderer;

	SDL_Rect rect;

	SDL_Surface* image[MAX_NUMBER_OF_IMAGES];
	SDL_Rect animation[MAX_NUMBER_OF_IMAGES][MAX_NUMBER_OF_FRAMES];
	int numberOfFrames[MAX_NUMBER_OF_IMAGES] = { 0 };
	int animationFrame[MAX_NUMBER_OF_IMAGES] = { 0 };
	double animationTime[MAX_NUMBER_OF_IMAGES] = { 0 };

public:
	singleSprite(	SDL_Surface* surface1,		  int numberOfFrames1 = 0,
					SDL_Surface* surface2 = NULL, int numberOfFrames2 = 0,
					SDL_Surface* surface3 = NULL, int numberOfFrames3 = 0, 
					SDL_Surface* surface4 = NULL, int numberOfFrames4 = 0, 
					SDL_Surface* surface5 = NULL, int numberOfFrames5 = 0, 
					SDL_Surface* surface6 = NULL, int numberOfFrames6 = 0, 
					int numberOfImages = 1) {


					image[1] = surface1; // running
					numberOfFrames[1] = numberOfFrames1;
					image[2] = surface2; //jump up
					numberOfFrames[2] = numberOfFrames2;
					image[3] = surface3; //jump down
					numberOfFrames[3] = numberOfFrames3;
					image[4] = surface4; //dash
					numberOfFrames[4] = numberOfFrames4;
					image[5] = surface5; //star
					numberOfFrames[5] = numberOfFrames5;
					image[6] = surface6; //explosion
					numberOfFrames[6] = numberOfFrames6;

					for (int i = 1; i <= numberOfImages; i++) {
						if (image[i] == NULL) {
							printf("Loading image error: %s\n", SDL_GetError());
							zwolnienie_powierzchni(screen, scrtex, window, renderer);
							exit;
						}
					}
	}

	SDL_Rect obszar = rect;

	void setRect(SDL_Rect sourceRect) {
		rect = sourceRect;
		obszar = rect;
	}
	void changeRectPosition(int dx, int dy, int rectN = 1) {
		rect.x += dx;
		rect.y += dy;
		obszar = rect;
	}
	void setAnimation(int backgroundColor, int numberOfImages = 1) {
		for (int i = 1; i <= numberOfImages; i++) {
			SDL_SetColorKey(image[i], true, backgroundColor);
			setrects(animation[i], numberOfFrames[i]);
		}
	}
	void animate(double changeFrameTime, double addedTime, SDL_Surface* destination, int imageN = 1, bool *boolVariable = false, int *bonus=0) {

		animationTime[imageN] += addedTime;
		if (animationTime[imageN] >= changeFrameTime) {
			animationFrame[imageN]++;
			animationTime[imageN] = 0;
		}
		if (animationFrame[imageN] == numberOfFrames[imageN]) {
			if (imageN == 6) *boolVariable = true;
			if (imageN == 5) {
				*boolVariable = false;
				*bonus = 0;
			}
			animationFrame[imageN] = 0;
		}
		SDL_BlitSurface(image[imageN], &animation[imageN][(int)animationFrame[imageN]], destination, &rect);
	}

	void setJumpAnimationFrame() {
		animationFrame[3] = numberOfFrames[2] - animationFrame[2];//jump
	}
	void zeroAnimationFrame(int imageN1, int imageN2 = 0) {
		animationFrame[imageN1] = 0;
		animationFrame[imageN2] = 0;
	}

};

class multipleSprite {
private:

	SDL_Surface* screen;
	SDL_Texture* scrtex;
	SDL_Window* window;
	SDL_Renderer* renderer;

	SDL_Rect multipleRect[MAX_NUMBER_OF_RECTS]; //defliny

	SDL_Surface* image;
	SDL_Rect animation[MAX_NUMBER_OF_FRAMES];
	int numberOfFrames = 0;
	int animationFrame = 0;
	double animationTime = 0;

	
public:
	SDL_Surface* obraz;
	SDL_Rect obszar[MAX_NUMBER_OF_RECTS];

	multipleSprite( SDL_Surface* surface, int amountOfFrames = 0) {


		image = surface; 
		obraz = image;
		numberOfFrames = amountOfFrames;
	
		if (image == NULL) {
			printf("Loading image error: %s\n", SDL_GetError());
			zwolnienie_powierzchni(screen, scrtex, window, renderer);
			exit;
		}
	}

	void setRects(int numberOfRects, SDL_Rect sourceRect, int backgroundColor) {
		for (int i = 1; i <= numberOfRects; i++) {
			multipleRect[i] = sourceRect;
			obszar[i] = multipleRect[i];
		}
		
	}
	void updateMultipleRects(int numberOfRects) {
		for (int i = 1; i <= numberOfRects; i++)
			obszar[i] = multipleRect[i];
	}
	void changeMultipleRectstPosition(int dx, int dy, int rectN) {

		multipleRect[rectN].x += dx;
		multipleRect[rectN].y += dy;
		obszar[rectN] = multipleRect[rectN];

	}
	void setRectsAnimation(int numberOfImages) {
		for (int i = 1; i <= numberOfImages; i++) {
			setrects(animation, numberOfFrames);
		}
	}
	void animateMultipleRects(double changeFrameTime, double addedTime, SDL_Surface* destination, int imageN = 1, int rectN = 1) {

		animationTime += addedTime;
		if (animationTime >= changeFrameTime) {
			animationFrame++;
			animationTime = 0;
		}
		if (animationFrame == numberOfFrames) animationFrame = 0;
		SDL_BlitSurface(image, &animation[(int)animationFrame], destination, &multipleRect[rectN]);
	}
	void hideBackgroundColor(int backgroundColor) {
		SDL_SetColorKey(image, true, backgroundColor);
		SDL_SetColorKey(obraz, true, backgroundColor);
	}
	void changeRectsPosition(int dx, int dy, int rectN = 1) {
		multipleRect[rectN].x += dx;
		multipleRect[rectN].y += dy;
		obszar[rectN] = multipleRect[rectN];
	}
	void setNewRectsPosition(int dx, int dy, int rectN, bool zeroTimers = false) { // przeszkody
		multipleRect[rectN].x = dx;
		multipleRect[rectN].y = dy;
		obszar[rectN] = multipleRect[rectN];
		if (zeroTimers) {
			animationTime = 0;
			animationFrame = 0;
		}
	}

};

struct SpriteSet {
	singleSprite unicorn = singleSprite(SDL_LoadBMP("./bieg1.bmp"), 9, SDL_LoadBMP("./skok_gora2.bmp"), 10, SDL_LoadBMP("./skok_dol1.bmp"), 10, SDL_LoadBMP("./zryw1.bmp"), 4, SDL_LoadBMP("./gwiazdeczka1.bmp"), 5, SDL_LoadBMP("./eksplozja1.bmp"), 5, 6);
	multipleSprite stars = multipleSprite(SDL_LoadBMP("./star1.bmp"));
	multipleSprite girls = multipleSprite(SDL_LoadBMP("./wrozka1.bmp"));
	multipleSprite holes = multipleSprite(SDL_LoadBMP("./dziura1.bmp"));
	multipleSprite holeend = multipleSprite(SDL_LoadBMP("./holeend1.bmp"));
	multipleSprite stalactites = multipleSprite(SDL_LoadBMP("./stal2.bmp"));
	multipleSprite platforms = multipleSprite(SDL_LoadBMP("./platforma1.bmp"));
	multipleSprite doplhins = multipleSprite(SDL_LoadBMP("./animacjadelfin1.bmp"), 5);
};

struct positions {
	SDL_Rect unicorn;
	SDL_Rect stars;
	SDL_Rect girls;
	SDL_Rect holes;
	SDL_Rect holeend;
	SDL_Rect stalactites;
	SDL_Rect platforms;
	SDL_Rect doplhins;
};

int initializeSDL();
int SetUpWindow(SDL_Window* window, SDL_Renderer* renderer, int* rc);
int checkSurface(SDL_Surface* surface, SDL_Surface* screen, SDL_Texture* scrtex, SDL_Window* window, SDL_Renderer* renderer);

void setInitialPositions(positions* Init);
void createSprites(positions* Init, SpriteSet* sprite, int backgroundColor);


void SDL_EventBegin(SDL_Event event, bool *begin, bool *quit ) {

	
		switch (event.type) {
		case SDL_KEYDOWN:
			if (event.key.keysym.sym == SDLK_ESCAPE) {
				*quit = true;
				*begin = true;
			}
			else if (event.key.keysym.sym == SDLK_n) *begin = true;
			break;

		case SDL_QUIT:
			*quit = true;
			*begin = true;
			break;

		};
	
}

#ifdef __cplusplus
extern "C"
#endif
int main(int argc, char** argv) {
	int t1, t2, frames, rc;
	double delta, worldTime, fpsTimer, fps, distance, etiSpeed;
	SDL_Event event;
	SDL_Surface* screen, * charset, * click_to_play,  * tlo_tecza, * map, * ikonka_zycia, * wrozki, * znaczek_eti, * star, * stalaktyt, * dziuraa, * grass, * ziemniaki, *niebo;
	SDL_Texture* scrtex;
	SDL_Window* window;
	SDL_Renderer* renderer;

	initializeSDL();
//	rc = SDL_CreateWindowAndRenderer(0, 0, SDL_WINDOW_FULLSCREEN_DESKTOP, &window, &renderer);
	rc = SDL_CreateWindowAndRenderer(SCREEN_WIDTH, SCREEN_HEIGHT, 0, &window, &renderer);
	SetUpWindow(window,renderer,&rc);
	screen = SDL_CreateRGBSurface(0, SCREEN_WIDTH, SCREEN_HEIGHT, 32, 0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000);
	scrtex = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_ARGB8888, SDL_TEXTUREACCESS_STREAMING, SCREEN_WIDTH, SCREEN_HEIGHT);


#ifndef Ładowanie_obrazkow

	char text[128];
	int czarny = SDL_MapRGB(screen->format, 0x00, 0x00, 0x00);
	int zielony = SDL_MapRGB(screen->format, 0x00, 0xFF, 0x00);
	int czerwony = SDL_MapRGB(screen->format, 0xFF, 0x00, 0x00);
	int niebieski = SDL_MapRGB(screen->format, 0x11, 0x11, 0xCC);

	charset = SDL_LoadBMP("./cs8x8.bmp");
	checkSurface(charset, screen, scrtex, window, renderer);
	SDL_SetColorKey(charset, true, 0x000000);

	click_to_play = SDL_LoadBMP("./click_to_play.bmp");
	checkSurface(click_to_play, screen, scrtex, window, renderer);

	tlo_tecza = SDL_LoadBMP("./tlo_tecza.bmp");
	checkSurface(tlo_tecza, screen, scrtex, window, renderer);

	map = SDL_LoadBMP("maps/map21.bmp");
	checkSurface(map, screen, scrtex, window, renderer);
	
	ikonka_zycia = SDL_LoadBMP("./ikonka_zycia.bmp");
	checkSurface(ikonka_zycia, screen, scrtex, window, renderer);
	SDL_SetColorKey(ikonka_zycia, true, czarny);


#endif


#ifndef zmienne animacje

	bool begin = false;
	bool quit = false;
	bool control_with_arrows = true;

	int dlugosc_animacji_rozbijania = 0;
	bool wybuch_gwiazdy = false;
	bool explosion_animation = false;

	double czas_bonusowy_napis = 0;
	int bonusowe_punkty_gwiazda = 0;
	int bonusowe_punkty_wrozka = 0;

	double czas_blysk_gwiazdy = 0;
	double czas_skok = 0;
	double czas_delfin = 0;

	int mapY = SURFACE_HEIGHT + GRUBOSC_PODLOZA / 2;
	int wartosc = 2;
	int wartosc_kamera = 0;

	t1 = SDL_GetTicks();
	frames = 0;
	fpsTimer = 0;
	fps = 0;
	worldTime = 0;
	distance = 0;
	etiSpeed = 1;
#endif

	positions Init;
	setInitialPositions(&Init);

	SpriteSet sprite;
	createSprites(&Init, &sprite, czarny);
	
	while (!quit) {

		while (!begin) {
			while (SDL_PollEvent(&event)) 
			SDL_EventBegin(event, &begin, &quit);

			DrawSurface(screen, click_to_play, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2);
			DrawRectangle(screen, 4, 4, SCREEN_WIDTH - 8, 36, czerwony, niebieski);

			sprintf(text, "Witamy w grze Robot Unicorn Attack!");
			DrawString(screen, screen->w / 2 - strlen(text) * 8 / 2, 10, text, charset);
			sprintf(text, "Wcisnij n zeby spelnić swoje marzenia!");
			DrawString(screen, screen->w / 2 - strlen(text) * 8 / 2, 26, text, charset);

			update_the_screen(screen, scrtex, renderer);
		}
		
		//tworzenie nowej gry - inicjalizacja zmiennych
#ifndef zmienne
		
		frames = 0;
		fpsTimer = 0;
		fps = 0;
		worldTime = 0;
		distance = 0;
		etiSpeed = 1;

		int mnoznik_przyspieszenia = 1;
		int isJumping = 0, isFalling = 0;
		unsigned int jump = 0;
	

		int zryw = 5;
		int dlugosc_klatek_zrywu = 0;
		int ilosc_dodawanych_klatek_w_zrywie = 1;

		int lives = 3;
		bool sprite_over = false;

		int spadl_na_dodatkowe_podloze = 0;

		int max_girl_move= 0;
		int girl_moved = 0;
		
		int punkty = 0;
		int przeszkoda_zotała_rozbita[ILOSC_PRZESZKOD + 1] = { 0 }; //numerowane od 1
		int kolejna_gwiazda_rozbita = 0;

		int wrozka_zostala_zebrana[ILOSC_WROZEK + 1] = { 0 }; //numerowane od 1
		int kolejna_wrozka_zebrana = 0;

		int losowa_odleglosc = 0;
		srand((unsigned)time(0));
		losowa_odleglosc = (rand() % LOSOWANIE_ODLEGLOSCI);

#endif
		while (lives > 0) {
			if (!sprite_over) {
				if (!explosion_animation) {
					
					while (SDL_PollEvent(&event)) {
						switch (event.type) {
						case SDL_KEYDOWN:
							if (event.key.keysym.sym == SDLK_ESCAPE) quit = true; //wyjscie z programu

							else if (event.key.keysym.sym == SDLK_d) { // zmiana ustawien sterowania
								if (control_with_arrows) control_with_arrows = false;
								else control_with_arrows = true;

							}

							else if (control_with_arrows) {
								if (event.key.keysym.sym == SDLK_UP) {//skok
									if (isJumping == 0) {
										isJumping = 1;
										
									}
									else if (isJumping == 1 && isFalling == 1) {
										isJumping = 2;
									}
									
									sprite.unicorn.zeroAnimationFrame(2, 3);
								}
								else if (event.key.keysym.sym == SDLK_RIGHT) //zryw
								{
									if (zryw == 5) {
										zryw = 2;

										if (jump > 0) {
											isJumping = 1;
											isFalling = 1;
										}
										if (jump == 0) {
											isJumping = 0;
											isFalling = 0;
										}

									}
								}
							}

							else if (!control_with_arrows) {
								if (event.key.keysym.sym == SDLK_z) { //skok
									if (isJumping == 0) isJumping = 1;
									else if (isJumping == 1 && isFalling == 1) isJumping = 2;
								}

								else if (event.key.keysym.sym == SDLK_x) //zryw
								{
									if (zryw == 5) {
										zryw = 2;

										if (jump > 0) {
											isJumping = 1;
											isFalling = 1;
										}
										if (jump == 0) {
											isJumping = 0;
											isFalling = 0;
										}

									}
								}
							}
							break;

						case SDL_KEYUP:
							if (control_with_arrows) {
								if (event.key.keysym.sym == SDLK_UP) { //spadanie po skoku
									isFalling++;
									if (isFalling == 3)
										isFalling = 2;
									if (isFalling == 1 && jump == 0)
										isFalling = 0;
									sprite.unicorn.setJumpAnimationFrame();
								}
								else if (event.key.keysym.sym == SDLK_RIGHT) {
									zryw = 3; //zryw

								}
							}

							if (!control_with_arrows) {
								if (event.key.keysym.sym == SDLK_z) { //spadanie po skoku
									isFalling++;
									if (isFalling == 3)
										isFalling = 2;
									if (isFalling == 1 && jump == 0)
										isFalling = 0;
								}
								else if (event.key.keysym.sym == SDLK_x) {
									zryw = 3; //zryw
								}
							}
							break;
						case SDL_QUIT:
							quit = true;
							break;
						};
					};

					zmierz_czas(&t1, &delta, &worldTime);


#ifndef tła

					//tlo
					DrawSurface(screen, tlo_tecza, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2);

					for (int i = 0; i < lives; i++)
					DrawSurface(screen, ikonka_zycia, i*60 + 40, SCREEN_HEIGHT - 50);


					//zmien sposob prezentacji mapy - malo jasny
					float mapX = -frames + SZEROKOSC_MAPY_BMP / 2;
					//mapa i stalaktyty
					DrawSurface(screen, map, mapX, mapY);


					//pokazuje kolejna czesc mapy
					if (mapX < SCREEN_WIDTH - SZEROKOSC_MAPY_BMP / 2 && mapX > -SZEROKOSC_MAPY_BMP / 2) {
						int diff = SZEROKOSC_MAPY_BMP + mapX;
						DrawSurface(screen, map, diff, mapY);
					}
#endif
					
					//animacja biegu
					if ((isJumping == 0 && zryw != 2) || (isJumping!= 0 && zryw ==3)) {
						sprite.unicorn.animate(0.15, delta, screen, 1);}
					//zryw i skok
#ifndef zryw i skok
					if (zryw != 0) {
						//zryw = 2 kon jest podczas zrywu --> zryw aktywny
						//zryw = 3 powracanie na pozycje
						//zryw = 4 zryw sie skonczyl - mozliwy dodatkowy skok
						//zryw = 5 kon upadl na ziemie po zakonczeniu zrywu lub dodtakowego skoku, pelna gotowosc do kolejnego zrywu

						if (zryw == 2){
							if (dlugosc_klatek_zrywu < 100){	
								sprite.unicorn.animate(0.1, delta, screen, 4);

								dlugosc_klatek_zrywu += ilosc_dodawanych_klatek_w_zrywie;
								sprite.unicorn.changeRectPosition(ilosc_dodawanych_klatek_w_zrywie, 0);
								
							}
							else {
								zryw = 3;
							}
						}
						if (zryw == 3) {
							if (dlugosc_klatek_zrywu > 0) {


								dlugosc_klatek_zrywu -= ilosc_dodawanych_klatek_w_zrywie;
								sprite.unicorn.changeRectPosition(-ilosc_dodawanych_klatek_w_zrywie, 0);


							}
							else {
								zryw = 4;
								sprite.unicorn.zeroAnimationFrame(4);
							}
						}
						if (zryw == 4 || zryw == 5) {


							if (isJumping != 0) {
								if (isJumping == 1) {
									if (isFalling == 1 && jump > 0) { //spadek


										(jump)--;
										sprite.unicorn.changeRectPosition(0, 1);

										sprite.unicorn.animate(0.05, delta, screen, 3);

										if (jump == 0) { //koniec skoku
											isJumping = 0;
											isFalling = 0;
											zryw = 5;
											spadl_na_dodatkowe_podloze = 0;
											czas_skok = 0;
											//wartosc_kamera = 0;
										}
									}

									else { //wznoszenie sie
										jump++;
										sprite.unicorn.changeRectPosition(0, -1);

										if (jump == MAX_JUMP_HEIGHT / 2) {
											isFalling = 1;
											czas_skok = 0;
										}

										sprite.unicorn.animate(0.05, delta, screen, 2);


									}

								}

								if (isJumping == 2) {

									if (isFalling == 2 && jump > 0) { //spadek



										(jump)--;
										sprite.unicorn.changeRectPosition(0, 1);
										sprite.unicorn.animate(0.05, delta, screen, 3);

										if (jump == 0) { //koniec skoku
											isJumping = 0;
											isFalling = 0;
											zryw = 5;
											spadl_na_dodatkowe_podloze = 0;
											czas_skok = 0;
											//wartosc_kamera = 0;
										}
									}

									else { //wznoszenie sie
										(jump)++;
										
										if (jump == MAX_JUMP_HEIGHT) isFalling = 2;

										sprite.unicorn.changeRectPosition(0, -1);
										sprite.unicorn.animate(0.05, delta, screen, 2);

										
									}
								}
							}
							else zryw = 5;
						}
						//zablokowanie skoku wychodzacego po za gre
						if (sprite.unicorn.obszar.y == 10) {
							isJumping = 2;
							isFalling = 2;
						}
					}
#endif
					//printf("jump: %d ", jump);
					//printf("kamera: %d \n", wartosc_kamera);
#ifdef przeszkody
					//przeszkody
					for (int k = 1; k <= ILOSC_PRZESZKOD; k++) {
						int start_showing = k * ODL_POM_PRZESZKODAMI;
						int end_showing = k * ODL_POM_PRZESZKODAMI + SCREEN_WIDTH + 2 * sprite.stars.obszar[k].w + losowa_odleglosc;


						if (start_showing < frames && frames < end_showing) {

							if (przeszkoda_zotała_rozbita[k] == 0) {
								sprite.stars.obszar[k].x = start_showing + SCREEN_WIDTH - frames + losowa_odleglosc;

								if (SDL_HasIntersection(&sprite.unicorn.obszar, &sprite.stars.obszar[k])) {
									if (zryw == 2) {
										przeszkoda_zotała_rozbita[k] = 1;
										kolejna_gwiazda_rozbita++;
										bonusowe_punkty_gwiazda = 100 * kolejna_gwiazda_rozbita;
										punkty += bonusowe_punkty_gwiazda;
										printf("gwiazda rozbita \n");
										sprite.stars.obszar[k].x = SCREEN_WIDTH;
										czas_bonusowy_napis = 0;
									}
									else {
										printf("zderzenie z gwiazda \n");
										explosion_animation = true;
										 
									}
								}

								if (sprite.stars.obszar[k].x <= 0) {
									kolejna_gwiazda_rozbita = 0;
									printf("ominieta gwiazda\n");
								}

								SDL_BlitSurface(sprite.stars.obraz, NULL, screen, &sprite.stars.obszar[k]);
							}
						}

					}

#endif
					//animacja wybuchu gwiazdy
					if (bonusowe_punkty_gwiazda != 0 || wybuch_gwiazdy == true) {
						wybuch_gwiazdy = true;
						sprite.unicorn.animate(0.1, delta, screen, 5, &wybuch_gwiazdy, &bonusowe_punkty_gwiazda);
					}


#ifdef	stalaktyty
					//stalaktyty
					for (int k = 1; k <= ILOSC_STALAKTYTOW; k++) {
						int start_showing = k * ODL_POM_STALAKTYTAMI;
						int end_showing = k * ODL_POM_STALAKTYTAMI + SCREEN_WIDTH + 2 * sprite.stalactites.obszar[k].w;

						if (start_showing < frames && frames < end_showing) {

							sprite.stalactites.obszar[k].x = start_showing + SCREEN_WIDTH - frames;

							if (SDL_HasIntersection(&sprite.unicorn.obszar, &sprite.stalactites.obszar[k])) {
								explosion_animation = true;
								 
								printf("STALAKTYT \n");
							}

							SDL_BlitSurface(sprite.stalactites.obraz, NULL, screen, &sprite.stalactites.obszar[k]);
							//DrawRectangle(screen, stal[k].x, stal[k].y, stal[k].w, stal[k].h, czerwony, niebieski);
						}
					}
#endif
#ifdef	podl
					//dodatkowe podloze
					for (int k = 1; k <= ILOSC_DOD_PODLOZA; k++) {

						//spadl_na_dodatkowe_podloze
						// 0 jest przed obszarem dod podloza
						// 1 aktualnie przebywa na dod podlozu
						// 2 zaczal spadac z dodatkowego podloza

						int start_showing = k * ODL_POM_DOD_PODLOZAMI;
						int end_showing = k * ODL_POM_DOD_PODLOZAMI + SCREEN_WIDTH + SZEROKOSC_DOD_PODLOZA;



						if (start_showing < frames && frames < end_showing) {
							int X = start_showing + SCREEN_WIDTH - frames;
							int Y = SURFACE_HEIGHT - WYSOKOSC_DODATKOWEGO_PODLOZA - (k - 1) * ROZNICA_POZIOMOW_MIEDZY_DOD_PODLOZAMI;
							sprite.platforms.setNewRectsPosition(X, Y, k);
							
							SDL_BlitSurface(sprite.platforms.obraz, NULL, screen, &sprite.platforms.obszar[k]);
							/*printf("%d %d %d %d\n", sprite.platforms.obszar[k].x, sprite.platforms.obszar[k].y,
								sprite.platforms.obszar[k].w, sprite.platforms.obszar[k].h);*/
							//DrawRectangle(screen, sprite.platforms.obszar[k].x, sprite.platforms.obszar[k].y, sprite.platforms.obszar[k].w, sprite.platforms.obszar[k].h, zielony, niebieski);
							int granica = WYSOKOSC_DODATKOWEGO_PODLOZA - 1 + (k - 1) * ROZNICA_POZIOMOW_MIEDZY_DOD_PODLOZAMI - wartosc_kamera;
							//printf("%d %d %d \n", k, jump, granica);
							if (spadl_na_dodatkowe_podloze == 0 && SDL_HasIntersection(&sprite.unicorn.obszar, &sprite.platforms.obszar[k])) {
								if (jump < granica) {
									printf("zderzenie czolowe dodatkowe podloze \n");
									explosion_animation = true;
									 
								}

								else {
									jump = 0;
									isFalling = 0;
									isJumping = 0;
									spadl_na_dodatkowe_podloze = 1;
								}
							}

							if (end_showing - frames <= 2 * mnoznik_przyspieszenia) {

								if (spadl_na_dodatkowe_podloze == 1) jump += WYSOKOSC_DODATKOWEGO_PODLOZA + (k - 1) * ROZNICA_POZIOMOW_MIEDZY_DOD_PODLOZAMI;

								spadl_na_dodatkowe_podloze = 2;
							}
						}
					}

					if (spadl_na_dodatkowe_podloze == 2 && jump >= 0 && isJumping == 0) {
						if (jump == 0) spadl_na_dodatkowe_podloze = 0;
						else {
							jump--;
							sprite.unicorn.changeRectPosition(0, 1);
						}
					}
#endif
#ifdef	dziura
				//dziury w podlozu
					

					for (int k = 1; k <= ILOSC_DZIUR; k++) {
						int start_showing = k * ODL_POM_DZIURAMI;
						int end_showing = k * ODL_POM_DZIURAMI + SCREEN_WIDTH + SZEROKOSC_DZIURY;

						
						if (start_showing < frames && frames < end_showing) {

							int X =  start_showing + SCREEN_WIDTH - frames;
							int Y = SURFACE_HEIGHT - 1;
							sprite.holes.setNewRectsPosition(X, Y, k);

							if (frames < end_showing) {

								if (SDL_HasIntersection(&sprite.unicorn.obszar, &sprite.holes.obszar[k]) && isJumping == 0) {
									sprite.unicorn.changeRectPosition(0, 1);
									jump--;
								}
								//DrawRectangle(screen, hole[k].x, hole[k].y, hole[k].w, hole[k].h, niebieski, czerwony);
							}

							SDL_BlitSurface(sprite.holes.obraz, NULL, screen, &sprite.holes.obszar[k]);

							
						}

						// zderzenie z poczatkiem terenu za dziura
						if (end_showing - SZEROKOSC_DZIURY < frames && frames < end_showing + SZEROKOSC_DZIURY) {
							int X = start_showing + SCREEN_WIDTH - frames + SZEROKOSC_DZIURY + 20;
							int Y = SURFACE_HEIGHT + GRUBOSC_PODLOZA / 2;

							sprite.holeend.setNewRectsPosition(X, Y, k);

							if (SDL_HasIntersection(&sprite.unicorn.obszar, &sprite.holeend.obszar[k])) {
								explosion_animation = true;
								 
								printf("koniec dziury\n");
							}
							//DrawRectangle(screen, hole_end[k].x, hole_end[k].y, hole_end[k].w, hole_end[k].h, niebieski, zielony);
						}

						//spadniecie na dolny koniec ekranu
						if (jump == -160) {
							sprite_over = true;
							lives--;
							printf("dno \n");
						}
					}
					
#endif
#ifdef	wrozki
					//wrozki
					for (int k = 1; k <= ILOSC_WROZEK; k++) {
						int start_showing = k * ODL_POM_WROZKAMI;
						int end_showing = k* ODL_POM_WROZKAMI + SCREEN_WIDTH + losowa_odleglosc+30;

						if (start_showing < frames && frames < end_showing) {
							
							if (wrozka_zostala_zebrana[k] == 0) {

								int X = start_showing + SCREEN_WIDTH - frames + losowa_odleglosc;
								
								int Y = sprite.girls.obszar[k].y;
								sprite.girls.setNewRectsPosition(X, Y, k);
								if (X >= 0 && X <= 610) {
									printf("%d %d %d\n", X, start_showing, end_showing);
									if (SDL_HasIntersection(&sprite.unicorn.obszar, &sprite.girls.obszar[k])) { // zebranie wrozki
										wrozka_zostala_zebrana[k] = 1;
										kolejna_wrozka_zebrana++;
										bonusowe_punkty_wrozka = 10 * kolejna_wrozka_zebrana;
										punkty += bonusowe_punkty_wrozka;
										printf("wrozka zdobyta %d \n", k);
										sprite.girls.obszar[k].x = SCREEN_WIDTH;
										czas_bonusowy_napis = 0;
									}

									if (girl_moved < max_girl_move) {
										girl_moved++;
										if (girl_moved % 2) {
											if (girl_moved < max_girl_move / 2)  sprite.girls.changeRectsPosition(0, -1, k);
											else sprite.girls.changeRectsPosition(0, 1, k);
										}
									}

									else {
										girl_moved = 0;
										srand((unsigned)time(0));
										max_girl_move = 100 + (rand() % 100);
									}

									if (sprite.girls.obszar[k].y <= 50) girl_moved = max_girl_move / 2; // ograniczenie pionowych ruchow wrozki
									else if (sprite.girls.obszar[k].y >= SURFACE_HEIGHT) girl_moved = 0;

									//DrawRectangle(screen, sprite.girls.obszar[k].x, sprite.girls.obszar[k].y, sprite.girls.obszar[k].w, sprite.girls.obszar[k].h, czerwony, niebieski);
									SDL_BlitSurface(sprite.girls.obraz, NULL, screen, &sprite.girls.obszar[k]);
								}
								if (sprite.girls.obszar[k].x <= 0) {
									kolejna_wrozka_zebrana = 0;
									printf("ominieta wrozka %d \n", k);
								}
								
								
							}
							
						}
					}
#endif
#ifndef delfiny
					for(int k=1;k<=ILOSC_DELFINOW; k++)
						if (punkty > k * ILOSC_PUNKTOW_NA_DELFINA) {
							
							sprite.doplhins.changeRectsPosition(1, 0, k);
							

							if(sprite.doplhins.obszar[k].x<SCREEN_WIDTH/2) sprite.doplhins.changeRectsPosition(0, -1, k);
							else sprite.doplhins.changeRectsPosition(0, 1, k);

							if (sprite.doplhins.obszar[k].x == SCREEN_WIDTH) {
								bool zeroTimers = true;
								sprite.doplhins.setNewRectsPosition(0, SCREEN_HEIGHT, k , zeroTimers);
							}

							sprite.doplhins.animateMultipleRects(0.35,delta,screen,1,k);

						}

#endif
#ifndef infoText
					// tekst informacyjny
					DrawRectangle(screen, 4, 4, SCREEN_WIDTH - 8, 36, czerwony, niebieski);
					sprintf(text, "Czas trwania = %.1lf s", worldTime);
					DrawString(screen, screen->w / 2 - strlen(text) * 8 / 2, 10, text, charset);
					sprintf(text, "Punkty: %d", punkty);
					DrawString(screen, screen->w / 2 - strlen(text) * 8 / 2, 26, text, charset);

					//prezentacja punktow bonusowych
					if (bonusowe_punkty_gwiazda != 0 || bonusowe_punkty_wrozka != 0){
						int bonusowe_punkty;
						if (bonusowe_punkty_gwiazda != 0) bonusowe_punkty = bonusowe_punkty_gwiazda;
						else bonusowe_punkty = bonusowe_punkty_wrozka;

						czas_bonusowy_napis += delta;

						if (czas_bonusowy_napis >= 1) {
							czas_bonusowy_napis = 0;
							bonusowe_punkty_gwiazda = 0;
							bonusowe_punkty_wrozka = 0;
						}
						else {
							sprintf(text, "+%d", bonusowe_punkty);
							DrawString(screen, sprite.unicorn.obszar.x / 2 + sprite.unicorn.obszar.w/2 , sprite.unicorn.obszar.y-10, text, charset);
						}
					}
#endif
					//DrawRectangle(screen, sprite.unicorn.obszar.x, sprite.unicorn.obszar.y, sprite.unicorn.obszar.w, sprite.unicorn.obszar.h, czerwony, niebieski);
					
					frames += mnoznik_przyspieszenia;

					if (frames % 200 == 0) punkty += 10;
				}
				else{
					sprite.unicorn.animate(0.2, delta, screen, 6, &sprite_over);
					if (sprite_over == true) {
						explosion_animation = false;
						lives--;
					}
				}

				update_the_screen(screen, scrtex, renderer);
				//rozszerzanie mapy
				if (frames > SZEROKOSC_MAPY_BMP) {
					frames = 0;
					mnoznik_przyspieszenia += 1;
					ilosc_dodawanych_klatek_w_zrywie += mnoznik_przyspieszenia;

					for (int k = 1; k <= ILOSC_PRZESZKOD; k++) 
						przeszkoda_zotała_rozbita[k] = 0;

					for (int k = 1; k <= ILOSC_WROZEK; k++) 
						wrozka_zostala_zebrana[k] = 0;

					srand((unsigned)time(0));
					losowa_odleglosc = (rand() % LOSOWANIE_ODLEGLOSCI);

				}


				if (quit) {
					zwolnienie_powierzchni(screen, scrtex, window, renderer);
					return 0;
				}
			}
			else {
				while (SDL_PollEvent(&event)) {
					switch (event.type) {
					case SDL_KEYDOWN:
						if (event.key.keysym.sym == SDLK_ESCAPE) quit = true; 

						//nowa gra
						else if (event.key.keysym.sym == SDLK_n) {
							sprite_over = false;
							frames = 0;
							punkty = 0;
							mnoznik_przyspieszenia = 1;
							jump = 0;
							isJumping = 0;
							isFalling = 0;

							kolejna_gwiazda_rozbita = 0;
							kolejna_wrozka_zebrana = 0;

							zryw = 5;
							dlugosc_klatek_zrywu = 0;
							ilosc_dodawanych_klatek_w_zrywie = mnoznik_przyspieszenia;

							createSprites(&Init, &sprite, czarny);

							srand((unsigned)time(0));
							losowa_odleglosc = (rand() % LOSOWANIE_ODLEGLOSCI);
							worldTime = 0;
						}
					break;

					case SDL_QUIT:
						quit = true;
						begin = true;
					break;

					};
				};

				DrawSurface(screen, click_to_play, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2);

				DrawRectangle(screen, 4, 4, SCREEN_WIDTH - 8, 36, czerwony, niebieski);
				sprintf(text, "Punkty: %d", punkty); 
				DrawString(screen, screen->w / 2 - strlen(text) * 8 / 2, 10, text, charset);
				sprintf(text, "Pozostalych szans na spelnienie marzen: %d.", lives);
				DrawString(screen, screen->w / 2 - strlen(text) * 8 / 2, 26, text, charset);


				update_the_screen(screen, scrtex, renderer);

				if (quit) {
					zwolnienie_powierzchni(screen, scrtex, window, renderer);
					return 0;
				}

			}	
		}

		////ilosc zyc ==0 --> przejdz do menu glownego
		begin = false;

	}

}

int initializeSDL() {
	if (SDL_Init(SDL_INIT_EVERYTHING) != 0) {
		printf("SDL_Init error: %s\n", SDL_GetError());
		return 1;
	}
}

int SetUpWindow(SDL_Window* window, SDL_Renderer* renderer, int* rc) {
	if (*rc != 0) {
		SDL_Quit();
		printf("SDL_CreateWindowAndRenderer error: %s\n", SDL_GetError());
		return 1;
	};
	SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "linear");
	SDL_RenderSetLogicalSize(renderer, SCREEN_WIDTH, SCREEN_HEIGHT);
	SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
	SDL_SetWindowTitle(window, "Robot Unicorn Attack");
	SDL_ShowCursor(SDL_DISABLE);
}


int checkSurface(SDL_Surface* surface, SDL_Surface* screen, SDL_Texture* scrtex, SDL_Window* window, SDL_Renderer* renderer) {
	if (surface == NULL) {
		printf("SDL_LoadBMP(click_to_play.bmp) error: %s\n", SDL_GetError());
		zwolnienie_powierzchni(screen, scrtex, window, renderer);
		return 1;
	};
}


void setInitialPositions(positions* Init) {
	Init->unicorn.x = SZEROKOSC_KONIA / 2 - 35;
	Init->unicorn.y = SURFACE_HEIGHT - WYSOKOSC_KONIA;
	Init->unicorn.w = SZEROKOSC_KONIA;
	Init->unicorn.h = WYSOKOSC_KONIA;

	Init->stars.x = SCREEN_WIDTH;
	Init->stars.y = SURFACE_HEIGHT - ROZMIAR_PRZESZKODY;
	Init->stars.w = ROZMIAR_PRZESZKODY;
	Init->stars.h = ROZMIAR_PRZESZKODY;

	Init->girls.x = SCREEN_WIDTH;
	Init->girls.y = 180 - 15;
	Init->girls.w = ROZMIAR_WROZKI;
	Init->girls.h = ROZMIAR_WROZKI;

	Init->stalactites.x = SCREEN_WIDTH;
	Init->stalactites.y = 40;
	Init->stalactites.w = 55;
	Init->stalactites.h = 60; // trzeba wydluzyc

	Init->holes.x = SCREEN_WIDTH;
	Init->holes.y = SCREEN_HEIGHT;
	Init->holes.w = SZEROKOSC_DZIURY;
	Init->holes.h = SCREEN_HEIGHT - SURFACE_HEIGHT;

	Init->holeend.x = SCREEN_WIDTH;
	Init->holeend.y = SCREEN_HEIGHT;
	Init->holeend.w = 10;
	Init->holeend.h = 100;

	Init->platforms.x = SCREEN_WIDTH;
	Init->platforms.y = SCREEN_HEIGHT;
	Init->platforms.w = SZEROKOSC_DOD_PODLOZA;
	Init->platforms.h = GRUBOSC_DOD_PODLOZA;

	Init->doplhins.x = 45;
	Init->doplhins.y = SCREEN_HEIGHT;
	Init->doplhins.w = 90;
	Init->doplhins.h = 90;
}

//mozna by poprawic kolory - dwa razy sie ihc uzywa -->niepotrzebnie
void createSprites(positions* Init, SpriteSet* sprite, int backgroundColor) {

	sprite->unicorn.setRect(Init->unicorn);
	sprite->unicorn.setAnimation(backgroundColor, numberOfHorseAnimations);

	sprite->stars.setRects(ILOSC_PRZESZKOD, Init->stars, backgroundColor);
	sprite->stars.hideBackgroundColor(backgroundColor);

	sprite->girls.setRects(ILOSC_WROZEK, Init->girls, backgroundColor);
	sprite->girls.hideBackgroundColor(backgroundColor);
	printf("A");
	sprite->stalactites.setRects(ILOSC_STALAKTYTOW, Init->stalactites, backgroundColor);
	//sprite->stalactites.hideBackgroundColor(czarny);

	sprite->holes.setRects(ILOSC_DZIUR, Init->holes, backgroundColor);
	sprite->holes.hideBackgroundColor(backgroundColor);

	sprite->holeend.setRects(ILOSC_DZIUR, Init->holeend, backgroundColor);
	sprite->holeend.hideBackgroundColor(backgroundColor);


	sprite->platforms.setRects(ILOSC_DOD_PODLOZA, Init->platforms, backgroundColor);
	//sprite->platforms.hideBackgroundColor(czarny);


	sprite->doplhins.setRects(ILOSC_DELFINOW, Init->doplhins, backgroundColor);

	sprite->doplhins.hideBackgroundColor(backgroundColor);
	sprite->doplhins.setRectsAnimation(numberOfDolphinsAnimations);

}
